(dp1
Vimport pagination
p2
I3069
sVProductSearch(query='', count=1000, display='guid', display='variants')
p3
I21265
sVroom.image_url
p4
I9269
sVBookFormSet = inlineformset_factory(Author, Book)
p5
I4459
sVph.id
p6
I5072
sVfrom cms.helpers import page_data
p7
I9133
sVfind_template_source('base.html', ['templates/microsite'])
p8
I8339
sVb.blog_type = 'commercial-blog'
p9
I16143
sVnltk.tokenize.RegexpTokenizer()
p10
I6437
sVlist(UncategorizedProduct.objects.all()[0:3])
p11
I2617
sVsrc, lo = s
p12
I10003
sVfrom django.template.defaultfilters import truncatewords_html
p13
I9071
sVa.difference(set(range(5, 20)))
p14
I5523
sVr = RoomSearch(order_by='updated', offset=0, count=100, display=['id', 'slug', 'last_updated'])
p15
I18361
sVset(x for x in xrange(10))
p16
I17995
sVs.result.results.items
p17
I10660
sVfor x in i:
p18
I206
sVfrom django.template.defaulttags import url
p19
I12641
sVfrom datetime import datetime
p20
I877
sVa.index(32)
p21
I8506
sV' '.join(tokenized_text)
p22
I6454
sVquestions = app.questionSearch({'query':'cats',})
p23
I9140
sVtokens
p24
I10014
sVt = threading.Timer(10, hello)
p25
I9390
sVlocale.locale_alias['en_gb']
p26
I11988
sVs.__class__.__name__
p27
I17206
sVa = (1, 2, 3)
p28
I7513
sVfrom search.models import RoomSearch
p29
I4194
sVFormSet = inlineformset_factory(Address, Branch)
p30
I4461
sV&&&!#[_]])$}%[_*!)@}[{*]%!@!_))]*%#^{{+]%]]*@%{%@+^[@}(^#%&**+)*^*[)[)%$[^#@^&+#
p31
I14045
sVfix_ampersands('&')
p32
I14699
sVARTICLE_TRACKED_URL_RE.finditer(s)
p33
I14891
sVstart = a.find('[')
p34
I1691
sV{]@]@*)!])})!}!%[+$)@)]](}*&!}]+![##]])]_[](+${+]_*@)_^{}&^)_*{*]#[]*{+{)(*&^_#_
p35
I14016
sVpages["pages"]
p36
I4990
sVrct = RootCategoryBrowseCatInfo('type')
p37
I3856
sVstr(unicode(a))
p38
I7566
sVhtmlentitydefs.codepoint2name()
p39
I4654
sV%(]#%!*(!]($!!&}%()+)*%$!}]+}!%{&+$}(#]]&()&%!&(}!&^{@]!__$_@_[)]]@&)}@$[)+{^)*%
p40
I13451
sVwebbrowser.open('http://xkcd.com/353/')
p41
I11432
sVa.match('jdkajsd_')
p42
I14275
sV!&!@!#+&^(!%^)#_^$)@*]{_#(*{%$${}_&&$+@+[@&&!!%][##&(+]+_[}[&}_((}%[]![^$(!&_$$#
p43
I13454
sVs = map(str, a)
p44
I11405
sVuser_ids = [ v['user'] for v in
p45
I7793
sV%@^}&[^]$^(%(&&+!{^!)!#%{[^&+@[+*!])}^])+[&[)}!}{$)}!)^#)^+}+${][!%_%$%&%$)){*_&
p46
I12965
sVfacet2 = [f.name for f in s.facets.filters]
p47
I20627
sVparser.add_option('pepe')
p48
I7054
sVa.insert(10, "hola")
p49
I1857
sVtojson((('GWO_ID_1', ('EXP1', 'EXP2')), ('GWO_ID_2', ('EXP3', 'EXP4')), ('GWO_ID_3', ('EXP5', 'EXP6'))))
p50
I14595
sVsys.stdout.write("Processing: 0%")
p51
I11856
sVraise DeprecationWarning('deprecated')
p52
I19944
sVhex(1).replace('0x', '')
p53
I18536
sVtokenize = build_tokenizer(phrases, stopwords=[None], base_tokenizer=HtmlPhraseTokenizer(stopwords=[None]))
p54
I6495
sVname, module = 'social_auth.backends.contrib'.rsplit('.', 1)
p55
I19479
sVlen(x)
p56
I18539
sVfrom httplib import HTTPSConnection
p57
I21136
sVfunc(1, 2, r=True, **{'d': 1})
p58
I18183
sVdo_load_menu_items()
p59
I5152
sVshove.Shove("bsddb:///home/omab/iriss_db/training_metadata.db")
p60
I3136
sV(^*&^{[!#$](%_!_**!}$$!&[^{(!#{#@_&^]{)[*+^](!&!(@^(@!@]%+]$(#%_}+)$@}&!#&&{^*{]
p61
I14009
sVa = ChildA.objects.all()[0]
p62
I19532
sVr = ProductByCategorySearch({ 'count': 4, 'filter': ['category,1049']})
p63
I10801
sVf.related.field
p64
I18807
sVurllib2.unquote("http://site-1426.maguirre.users.dev.mydeco.com/shopping/browse/living%20room/?_nc=1")
p65
I2541
sVtempfile.mktemp()
p66
I1908
sVfd = p.stdout.fileno()
p67
I15822
sVp = CmsPage.objects.get(pk=13711)
p68
I12250
sVu.friendships_accepted.all()
p69
I20072
sVimg.save("/tmp/pepe.png", "PNG", quality=100)
p70
I3733
sVs = ph.section1.a63d754c0ff711dea2dc001f3c609307['name1'].__unicode__()
p71
I5098
sVhex(10)
p72
I6261
sVu = User.objects.get(username='kevin.tran')
p73
I20070
sVx.__hash__
p74
I11568
sVx.data
p75
I17795
sVos.path.normpath?
p76
I12434
sV+*!@!#(+$!][!}@![$[_)$$&)^)[[*{@])}+^(!&*#%![(*+@+&_[)+)]$(++($+)#]}][]{*@%&@$$_
p77
I13419
sVwarn
p78
I17835
sVr.image
p79
I11469
sVp.live_date
p80
I18343
sVMostPopularRooms.description_template.__class__
p81
I3155
sV%timeit lambda_loop
p82
I4803
sVg.parent.obnob_users.get(user=u).exists()
p83
I20511
sVdef pepe(a=None, *args, **kwargs):
p84
I20867
sV[ x for x in y() ]
p85
I16266
sVdef append_titles(objs, value):
p86
I126
sVa = lambda r: raise Http404
p87
I7128
s.