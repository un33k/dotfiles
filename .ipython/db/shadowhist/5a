(dp1
Vfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm
p2
I3892
sVgtk.main()
p3
I7303
sVc = RoomCompetition.objects.all()[0]
p4
I11305
sVisinstance(Pepe, type)
p5
I21237
sVdatetime.datetime(*rfc822.parsedate('Fri Feb 05 19:12:32 +0000 2010')[:5])
p6
I11893
sVdata = ''.join(fd.readlines())
p7
I1068
sVmap(lambda x: urljoin(response.url, x), re.findall("href=\u005c"(/.+?)\u005c"", response.body))
p8
I17654
sVpprint.pprint(parse('content', example['content']))
p9
I16970
sVtop = 1
p10
I14992
sVr2.match("1222965720.132").group()
p11
I2777
sVfrom twitchess.playqueue import PlayQueue
p12
I16243
sVurlparse.urlunparse
p13
I8795
sVx = p.tpl['talent']['title']['text']
p14
I17793
sVfrom xmlrpclib import ServerProxy
p15
I8412
sVu.readlines()
p16
I2785
sVa[i]
p17
I2918
sVprint u'\u005cua'
p18
I11692
sVfrom websites.models import *
p19
I12607
sVx = SupplierUserData.objects.exclude(about='')[0]
p20
I19834
sVu = 'http://ase.emv3.com/D2UTF8?THIRDPARTY_OPTIN_FIELD=&EMAIL_FIELD=matiasaguirre%40gmail.com&LIST_MEMBERSHIP_FIELD=mydeco.com%2520newsletter&emv_ref=BdX7CqkdFhamshd_dJR3ncLXIEx6HKrA8ww5&FIRSTNAME_FIELD=matias&emv_tag=C7BD68F808000739'
p21
I7836
sV[ i[0] for i in [ ["aaa"], ["bbb"], ["ccc"] ] if "b" in i ]
p22
I2997
sVf.f_back.f_locals
p23
I4253
sVs.replace('.mpg', '').split("=")
p24
I6871
sVurllib.urlencode("djaskdj akdjas ")
p25
I3970
sVs = t.subtasks()[0]
p26
I891
sVpaginator.page(2)
p27
I12803
sViMPORT pickle
p28
I3173
sVp = Product.objects.get(pk='GB0002FAEGLAQVRGBJRYTOJJRKOSLHLYX4D6CTJG')
p29
I18214
sV[ s.get_random_image() for s in Sponsor.objects.all() ]
p30
I373
sVclient.GetContactsFeed
p31
I19789
sV(+[%*^!#)#+(}!)[!^{&[*[($%{+([#[[@&})$]@{^^#!$]_}!{*{*{![@$_@]+*{}[!#%@}]&#{*%{}
p32
I14039
sVfix_ampersands("&aaa; dajkdjas & dajsdkjas")
p33
I5409
sVd.today
p34
I19273
sVdatetime.date.__class__
p35
I7751
sVcatdata = c['catdata']
p36
I5443
sVf.url
p37
I7854
sVclient.profile.connect
p38
I9347
sVgetattr(p, '_language', None)
p39
I5877
sVg['e1c44ca80f2511debf8e001f3c609307'].__class__
p40
I4895
sVf = o._meta.get_field('cars')
p41
I18729
sV)^]()@$!(#_!((@&**)*_[@^)#}$%(}&)()+))&[[!%&}{&{[+](#&+_#(({*#]^(#]))#}}@_*{^%+^
p42
I13201
sVdb.entity('photo_tags', schema=(\u000aColumn('photo_id', Integer, ForeignKey('photos.id'), primary_key=True),\u000aColumn('tag_id', Integer, ForeignKey('tags.id'), primary_key=True)))
p43
I15218
sVfrom categorization import *
p44
I2284
sVv.value.name
p45
I8652
sVfrom microsite.models import *
p46
I5169
sVurllib.splitquery("aa=bb")
p47
I2954
sVrooms = defaultdict(list)
p48
I9301
sVs = '{% article_tracked_url "www.test.com" "http://google.com/" %} blah blah {% article_tracked_url "www.bloom.uk.com" "http://google.com/" %}'
p49
I14905
sVtuple(a.split(',', 1))
p50
I17671
sVclass SyncPageJSONEncoder(simplejson.JSONEncoder):\u000a    def default(self, obj):\u000a        if isinstance(obj, SyncPageData):\u000a            return (obj,id, obj.http_path, date_to_str(obj.date))\u000a        simplejson.JSONEncoder.default(self, obj)
p51
I1101
sVfrom cms.widgets import AdminDateField
p52
I18411
sVfilter?
p53
I12761
sVdatetime.datetime.utctimetuple()
p54
I4042
sVCmsContentMapping.objects.filter(fragment__in=f).values('fragment_id', 'object_id')
p55
I9173
sVslugify('hola mundo')
p56
I17273
sVt = Template('{% with """hola "mundo"""" as value %}{{ value|title }}{% endwith %}')
p57
I10287
sVChildA.objects.all().query.as_sql()
p58
I19535
sVmap(lambda i: i%2 == 0 and i, a)
p59
I8371
sV</td>
p60
I9689
sVfor y in x:
p61
I20992
sVr = re.compile('xxxx')
p62
I20609
sVfor item in LINK_RE.finditer("hola mund [url 10]"):
p63
I1599
sVline
p64
I1611
sVp pynotify.Notification.__doc__
p65
I7273
sVg.obnob_users.officer(rank=3)
p66
I20262
sVrated_item = RatedItem.objects.add_rate(v, 10, u)
p67
I339
sVdb.photos
p68
I15210
sVtype(models.CmsPage) == ClassType
p69
I18292
sVl.print_a
p70
I8366
sVuuid.uuid3()
p71
I18834
sVexceptions.__name__
p72
I16209
sVi.title
p73
I219
sVx = range(100)
p74
I16177
sVa = 'hola_mundo'
p75
I17365
sV!_&!&_{[)%@{_){_{**!@[[$]__^([)^++_+{+^_&!&$}![#}$$]]@[(_)^}_(&+_]{&}}}{_[][##+#
p76
I13033
sVprint f.get_form(2)
p77
I3319
sVx.sort(lambda l, r: cmp(l['a'], r['a']) or cmp(l['b'], r['b']))
p78
I19997
sVh.fragments
p79
I1665
sVa[a.find("_"):]
p80
I3462
sVx = Question.objects.select_related('options').all()
p81
I19027
sVfilters.tojson
p82
I11699
sVfrom django.template.defaultfilters import sl
p83
I4764
sVQuestion.objects.all()
p84
I7351
sValert('The Email address doesn\u005c't seem to be correct,\u005cnplease check the domain name.');
p85
I9663
sVlocale.setlocale('en')
p86
I5743
sVi.exifKeys()
p87
I5536
sVcgi.parse_qs("a.php?a=b&b=c&1")
p88
I2590
sVreduce(or, a)
p89
I18592
sVgoogle.BACKENDS['google-oauth'].enabled()
p90
I20234
sVo.info()
p91
I7839
sVroom.user.profile_url
p92
I9287
sVurlparse.urlparse('/forum/')
p93
I14545
sVurllib2.quote("cake stands & carriers")
p94
I5261
sVpprint(s)
p95
I16977
sVfrom opencv.highgui import cvCreateFileCapture, cvQueryFrame
p96
I12534
sVqs2 = qs.reverse()
p97
I20159
sVdisplay = ArticleSearchResult.FIELDS[:]
p98
I5318
s.