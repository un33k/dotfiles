(dp1
Vurlresolvers.reverse("wears")
p2
I2857
sVproduct_id = 'GB0000233OGVY6VAMYDUQCLQFMGXIPLJP3KBZJBS'
p3
I20874
sV$_+($!%{_]$^+^@_()#^[[^)$+@))&}+_$[_&+{!$]}]%$_!}[@)}[_($^+#}_%*%@*+(^!+)()[#*_#
p4
I13721
sV__import__('account.views.escapejs', fromlist=['.'], level=0)
p5
I8277
sVupdate cms_fragment_template set content_names = "image/image" where id = 27;
p6
I6622
sVf._get_related_query_name("a")
p7
I4578
sVr.webservice_data()
p8
I18086
sVa.index
p9
I8508
sVtest(10, True, *[10, 20])
p10
I18141
sVfs.form
p11
I3276
sVp types.CodeType.__doc__
p12
I6304
sVtpl.nodelist[0].render
p13
I11359
sVfrom classification.tokenizer import HtmlTokenizer
p14
I6401
sVl.acquire()
p15
I15995
sVp timeit.__doc__
p16
I4781
sVt.render(Context({'the_url': "/the-magazine/"}))
p17
I14632
sVclass FForm(forms.ModelForm):\u000a    class Meta:\u000a        model = CmsFragment
p18
I3711
sVEmailVisionEntryField.objects.all().values('name')
p19
I11421
sVsimplejson.loads("""{ "cms_competition_unsubscribe_text": "", "cms_contents_text": "<p><strong>We\u005cu2019ve teamed with <a href=\u005c"{% article_tracked_url \u005c"biomelifestyle.com\u005c"  \u005c"http://www.biomelifestyle.com/\u005c" %}\u005c" target=\u005c"_blank\u005c">Biome Lifestyle</a> to give Helen, Mick, Colette, and Derek the their Christmas hampers! </strong></p>\u005cn\u005cn<p>They will take home a \u005cu00a3250 hamper full of delightful Christmas decorations, including their fair trade Christmas wreath (right) and advent calendar, plus bestselling gifts including the Silk Scarf Cushion (right), Alpaca Slippers, Bulb Vase, Cotton Bathrobe and many more!   </p> \u005cn\u005cn<p>Like everything from Biome Lifestyle, the items have been carefully chosen to meet strict organic, sustainability and ethical standards \u005cu2013 without compromising on style. </p> \u005cn\u005cn<p>Biome Lifestyle know that being a conscientious consumer does not necessarily mean you are a hippy! Instead, they offer a unique range of gifts and homeware that unite style, design and ethics.</p>\u005cn\u005cn<p>Read the <a href=\u005c"/the-magazine/biome-lifestyle-terms\u005c">competition terms</a>.</p>\u005cn\u005cn<p><strong>For your chance to win, just tell us: Where are the artisans based who made the Recycled Fair Trade Christmas wreath (above)? HINT: <a href=\u005c"{% article_tracked_url \u005c"biomelifestyle.com\u005c"  \u005c"http://www.biomelifestyle.com/browse/ecogifts/christmas-at-home/recycled-fair-trade-christmas-wreath/\u005c" %}\u005c" target=\u005c"_blank\u005c">See the product page</a> to find out the answer. \u005cn\u005cn </strong></p>"}""")
p20
I11328
sV)
I802
sV!(+]{%(((&+!*%@[#*}^)_(@+*@*&(){{@}+]]+^*)({{%#})&(*$]{&$#_{{{[@](*$[!%!@%!*&!+&
p21
I12993
sV'en' < 'en-gb'
p22
I12664
sVq.query.group_by = [('book_post', 'MONTH(date)')]
p23
I15722
sVItem.objects.set_language('es').get(pk=1)
p24
I11076
sV[ a[i*6:i*6+6] for i in range(len(a)/6+len(a)%6) ]
p25
I487
sVnltk.tokenize.word_tokenize()
p26
I6508
sVa = ArticleForm()
p27
I21205
sVserialize()
p28
I17336
sVp.values
p29
I4756
sVround(13.399999999999999, 2)
p30
I11222
sVr2.callback
p31
I8237
sVa = { 1:2, 2:3 }
p32
I635
sVMYMOVE_RE.match(s)
p33
I16092
sV__import__('hp_splash', fromlist=['cms.plugins.'])
p34
I12846
sVfor k, v in a.iteritems():\u000a    clauses.append("%s IN (%s)" % (k, ", ".join(["%s " * len(v)])))
p35
I4539
sVCipher("hola")
p36
I996
sVf = v._meta.fields[-1]
p37
I8569
sV[ i['image'] for i in microsite_articles.get_contents(p).values() ]
p38
I9184
sVpurple
p39
I5598
sVclass ItemAdmin(admin.ModelAdmin):
p40
I17824
sVclient._address_book
p41
I9339
sV#++$+!#{([%%+)}+}_+$){{#++&%((^^@%!}^&^$($#%}+$}([]][@^_@}##&_)$##[{{@)%{+*}]{&^
p42
I12998
sVpages = tpl.cmspage_set.filter(state="live").order_by("http_path")
p43
I8835
sVItem._default_manager.filter().guery
p44
I11005
sVf.value_from_object(v[0])
p45
I8933
sV[!)*%)^!}&(}+[(#$^@*}%_$+)[)}!+^](+__@@{%}(#_#)[%[([$)*#)@&&*&#_$}{!_+_!$_*_)&@)
p46
I13443
sVa.pop()
p47
I400
sVpagination.pagination(10, 19, 2)
p48
I3083
sVrooms.keys
p49
I9303
sVb = B.objects.get(pk=1)
p50
I19413
sVu.delete
p51
I20324
sVgraphs['00202'].add_node('pepe')
p52
I7006
sV(x.seconds % 3600) / 60
p53
I19193
sVid(s)
p54
I15307
sVgen_word = lambda size: ''.join(random.choice(string.letters) for _ in xrange(size))
p55
I15663
sVq.query.group_by = 'date'
p56
I15702
sVif x:
p57
I19793
sVprint d.form()
p58
I4839
sVcgi.parse(s)
p59
I7590
sVf.errors['query']
p60
I12707
sVparser.add_option('--pepe')
p61
I7055
sVprint u'\u005cx262e'
p62
I4613
sV(f for f in [])
p63
I3199
sVu.obnob_groups
p64
I19939
sVx = o._meta.get_all_related_objects()[0]
p65
I18735
sVu._meta.get_field('first_name')
p66
I18678
sVserializers.get_serializer('csv')
p67
I11398
sV$*$%}*{!^[#@}&{&[(+@$)&!$&#}{]]++#]@!)[&@[_#)!!%){$]&)})*@)[{()@!)@^(#@]+@_$&#*@
p68
I13390
sVr = o.parse('ttp 123 as pp')
p69
I7199
sVa = {'sv': 1, 'pv':1, 'rv': 1}
p70
I16501
sVg.node_incidence['37328']
p71
I6965
sVf = s.fields["name"]
p72
I3773
sVlink_re = re.compile(r'href=(?P<open>["\u005c'])(?P<address>[^"\u005c']*/search/[^"\u005c']*)(?P<close>["\u005c'])')
p73
I1218
sVtpl = Template('{% var c_txt %}{{ t }}{% endvar %}{{ t }}')
p74
I11342
sV($&*#*&){+@{$#@[()[*!{}_)!&$%%^@!%!&@$!&^$_}!]&!]+[_*(^)_^]}**}&%)}[&#&[[)$]!&({
p75
I13024
sVp.fragments[0].contents
p76
I4179
sV#class A(object):\u000a    a = 1\u000a    b = 2\u000a    def print(self, x):
p77
I16334
sVurlparse.urldefrag(x)
p78
I19442
sVr2 = re.compile('[A-Z]{3}')
p79
I14120
sVurllib2.unquote(urllib2.unquote(u))
p80
I5437
s.