(dp1
Vu.obnob_groups.filter(membership__status='A')
p2
I19940
sV#(}_{$(&_&[_]%*&*@]}]}[{!&*}{{&+*$@%%}$+^[}{&$^%%^]#%{#](_){[()@@)[@]!#!%)&*+]_}
p3
I12939
sV&%+[%!{_{![+&[&!!_^_#^[%&[[}*++#!#**}{+}[+&+_$^^]}^^_{$)${!_)@_^_[}*#}&{!*@$#}}#
p4
I13424
sVbase64.b32encode('abc')
p5
I19235
sV*[(!]{*{[^)*(%[%*!(]}%*^_}&[)+(*_+(#((]]}$![@
p6
I13130
sVany((i>2 and i<4 for i in range(10)))
p7
I1929
sVdiscoverer
p8
I15583
sVimport jabberbot
p9
I4370
sVfrom result_ranking.models import *
p10
I7661
sVget_plugin('hp_splash')
p11
I12855
sVs.replace?
p12
I14897
sVfor line in file.readlines():\u000a    if sha(line.strip()).hexdigest() == "a3b8cf00426ade76d0376c528b13ebc15d691f3c":\u000a        print line
p13
I12083
sVa.indices()
p14
I650
sVx = [('x', True), ('y', True), ('z', False), ('h', False), ('t', True)]
p15
I19454
sVtimeit.__doc__
p16
I4780
sVcgi.parse_qsl?
p17
I15620
sVr = re.compile(".*")
p18
I2638
sVtl = t.GetUserTimeline()
p19
I16363
sVmain = glade.XML(gladefile, 'mainWindow')
p20
I8005
sVoauth.__path__
p21
I18521
sV_ = lambda s: s
p22
I4853
sVfrom buythelook.models import *
p23
I4357
sVparse(example)
p24
I16967
sVsys.__name__
p25
I10894
sVs.execute(Tag.insert())
p26
I15221
sVcm
p27
I17455
sVv[-1].value
p28
I8700
sVd.do_expose_event(d, gtk.gdk.Event(1))
p29
I8091
sVfor r in x:\u000a    print r.count()
p30
I199
sVfrom cms.models import Name
p31
I8915
sVr = s.result.items[0]
p32
I15452
sVimport pyexiv2
p33
I5532
sVfrom obj.models import *
p34
I5764
sV_]}]!^_[!)&&&]_(#]+_!_}&&)#$*+^###[**@{}{%^[&#+&__@@@[+t]+&)^{*((@$!$)%]$[{}$}&$
p35
I13939
sVopen('/tmp/test', 'arw')
p36
I16558
sVs.last_activity_content_type
p37
I11917
sVu.friendships_requested.select_related('friend_a')
p38
I20074
sVsys.stdout.write("hola\u005cn")
p39
I6559
sVlen(articles.get_result().get_items())
p40
I5356
sVr.translations
p41
I5771
sVf.rel.get_related_field()
p42
I18775
sVfrom PyQt4.QtWebKit import *
p43
I18007
sVg = graphs['00202']
p44
I6929
sVrewrite_url('http://mydeco.com/microsite/bestonlinesofas.com/the-magazine')
p45
I8803
sVcalendar.month?
p46
I21317
sVurlparse.urlunparse(('http://', 'google.com', '/a', '', 'a=1', 'xxx'))
p47
I20793
sVlist(iter(range(10)))
p48
I8537
sVclass InputParser(HTMLParser.HTMLParser):\u000a    def __init__(self, *args, **kwargs):\u000a        HTMLParser.HTMLParser.__init__(self, *args, **kwargs)\u000a        self.inputs = []\u000a    def handle_startendtag(self, tag, attrs):\u000a        if tag.lower() == 'input':\u000a            self.inputs.append(attrs)
p49
I9752
sVr = re.compile('var ([^ ]+) = [\u005c'"]?([^;\u005c'"]+)[\u005c'"]?;')
p50
I17087
sVcmp(None, None)
p51
I8899
sVfrom django.contrib.auth.models import Group
p52
I6573
sVw.load_uri('http://google.com')
p53
I18039
sV%*+[}#{)@]&@($+&!^[}![}&$}*^[!)#^_#**${+(!+!#)!^%_#%[][(@(!!}&)_*{%@_^!)_!_@!^!(
p54
I12934
sV__import__('hp_splash', fromlist=['cms.plugins'], level=-1)
p55
I12847
sVr.url
p56
I4074
sV#]^}{$}*@#@$$[]_!+]&+^@@){#&**}{{[%$[^!&@])&)_]%(!{*#@]#())+^_#{^](&](##[&[}^&%@
p57
I13318
sVinput("hola")
p58
I2803
sVhtmlentitydefs.codepoint2name('qw')
p59
I4656
sVfrom tipocms.model simport *
p60
I12230
sV]&[]{{](}*#^%(!@%$@)&})+#[@[(}%+&)_*}#!)+]*&}+%](++**]!(([#[$*])}{{!+_*])$${!]&%
p61
I13006
sVtempfile.TemporaryFile('w')
p62
I12275
sVs.strip?
p63
I15118
sV$(+$*@!*&^[!{+@[}$#&{}[+&^)}&*[]}*^#]$*]%^}&@)]${)$@@%[*$((_)[*@[%%&^&^}*{#^}&@}
p64
I13207
sVopr.start_parse("tag xxx as yyy from mmm ppp tttt".split())
p65
I445
sVfor item in a:\u000a    (even if item % 2 == 0 else odd).append(item)
p66
I10815
sVprint a.encode('utf-8')
p67
I7579
sVt.fmap.select_related('page').all()[0].page
p68
I14923
sVr.type
p69
I17614
sVt = Template('{% ifequal cat.shortname.lower "sale" %} on sale{% endifequal %}')
p70
I10874
sVo.__class__
p71
I17472
sVfrom urllib import unquote
p72
I3435
sVpq.move('matias', 'f2xe3')
p73
I16220
sVct.tokenize_doc(text)
p74
I6350
sVchain
p75
I2505
sVItem.objects.set_language('es')[0].title_en
p76
I11109
sVe.expiration = 120
p77
I9554
sVr.result.get_items()[0]
p78
I4203
sVurlparse.urlunparse('?a=1&b=2').query
p79
I11722
sVRoom._meta.object_name
p80
I17344
sVtry:\u000a    a['pepe']\u000aexcept KeyError, e:\u000a    print e.message
p81
I6788
sVs = serializers.get_serializer('csv')
p82
I11388
sVprod.images
p83
I14330
sVFacet.objects.all()
p84
I3627
sVsys.ipcompleter.__doc__
p85
I2055
sVprint data['section1']['nousednames']['grouping'].form
p86
I4846
sVurljoin.__name__
p87
I17656
s.