(dp1
Vu.obnob_groups.filter(membership__status='A')
p2
I19940
sVhtmlentitydefs.codepoint2name('qw')
p3
I4656
sV]&[]{{](}*#^%(!@%$@)&})+#[@[(}%+&)_*}#!)+]*&}+%](++**]!(([#[$*])}{{!+_*])$${!]&%
p4
I13006
sV*[(!]{*{[^)*(%[%*!(]}%*^_}&[)+(*_+(#((]]}$![@
p5
I13130
sVdiscoverer
p6
I15583
sVs.execute(Tag.insert())
p7
I15221
sV#(}_{$(&_&[_]%*&*@]}]}[{!&*}{{&+*$@%%}$+^[}{&$^%%^]#%{#](_){[()@@)[@]!#!%)&*+]_}
p8
I12939
sVany((i>2 and i<4 for i in range(10)))
p9
I1929
sV$(+$*@!*&^[!{+@[}$#&{}[+&^)}&*[]}*^#]$*]%^}&@)]${)$@@%[*$((_)[*@[%%&^&^}*{#^}&@}
p10
I13207
sVr.result.get_items()[0]
p11
I4203
sVtl = t.GetUserTimeline()
p12
I16363
sVoperator?
p13
I21518
sVa.indices()
p14
I650
sVx = [('x', True), ('y', True), ('z', False), ('h', False), ('t', True)]
p15
I19454
sVr.url
p16
I4074
sVd.do_expose_event(d, gtk.gdk.Event(1))
p17
I8091
sVpq.move('matias', 'f2xe3')
p18
I16220
sVcmp(None, None)
p19
I8899
sVfrom obj.models import *
p20
I5764
sVopen('/tmp/test', 'arw')
p21
I16558
sVget_plugin('hp_splash')
p22
I12855
sVr.translations
p23
I5771
sVf.rel.get_related_field()
p24
I18775
sVprint data['section1']['nousednames']['grouping'].form
p25
I4846
sVRoom._meta.object_name
p26
I17344
sVg = graphs['00202']
p27
I6929
sVsys.__name__
p28
I10894
sVfor r in x:\u000a    print r.count()
p29
I199
sVs.replace?
p30
I14897
sV#]^}{$}*@#@$$[]_!+]&+^@@){#&**}{{[%$[^!&@])&)_]%(!{*#@]#())+^_#{^](&](##[&[}^&%@
p31
I13318
sVoauth.__path__
p32
I18521
sVs.strip?
p33
I15118
sVopr.start_parse("tag xxx as yyy from mmm ppp tttt".split())
p34
I445
sVe.expiration = 120
p35
I9554
sVfrom result_ranking.models import *
p36
I7661
sVfrom urllib import unquote
p37
I3435
sVbase64.b32encode('abc')
p38
I19235
sVfrom buythelook.models import *
p39
I4357
sVtry:\u000a    a['pepe']\u000aexcept KeyError, e:\u000a    print e.message
p40
I6788
sVchain
p41
I2505
sVr = re.compile('var ([^ ]+) = [\u005c'"]?([^;\u005c'"]+)[\u005c'"]?;')
p42
I17087
sV&%+[%!{_{![+&[&!!_^_#^[%&[[}*++#!#**}{+}[+&+_$^^]}^^_{$)${!_)@_^_[}*#}&{!*@$#}}#
p43
I13424
sVparse(example)
p44
I16967
sVimport jabberbot
p45
I4370
sVv[-1].value
p46
I8700
sVfor line in file.readlines():\u000a    if sha(line.strip()).hexdigest() == "a3b8cf00426ade76d0376c528b13ebc15d691f3c":\u000a        print line
p47
I12083
sVcalendar.month?
p48
I21317
sVsys.ipcompleter.__doc__
p49
I2055
sVcgi.parse_qsl?
p50
I15620
sVr = re.compile(".*")
p51
I2638
sVmain = glade.XML(gladefile, 'mainWindow')
p52
I8005
sV_ = lambda s: s
p53
I4853
sVcm
p54
I17455
sVimport pyexiv2
p55
I5532
sVfrom cms.models import Name
p56
I8915
sVr = s.result.items[0]
p57
I15452
sVprint a.encode('utf-8')
p58
I7579
sVs.last_activity_content_type
p59
I11917
sVu.friendships_requested.select_related('friend_a')
p60
I20074
sVlen(articles.get_result().get_items())
p61
I5356
sVsys.stdout.write("hola\u005cn")
p62
I6559
sVfrom PyQt4.QtWebKit import *
p63
I18007
sVw.load_uri('http://google.com')
p64
I18039
sVrewrite_url('http://mydeco.com/microsite/bestonlinesofas.com/the-magazine')
p65
I8803
sVurlparse.urlunparse(('http://', 'google.com', '/a', '', 'a=1', 'xxx'))
p66
I20793
sVlist(iter(range(10)))
p67
I8537
sVclass InputParser(HTMLParser.HTMLParser):\u000a    def __init__(self, *args, **kwargs):\u000a        HTMLParser.HTMLParser.__init__(self, *args, **kwargs)\u000a        self.inputs = []\u000a    def handle_startendtag(self, tag, attrs):\u000a        if tag.lower() == 'input':\u000a            self.inputs.append(attrs)
p68
I9752
sVtimeit.__doc__
p69
I4780
sVt.fmap.select_related('page').all()[0].page
p70
I14923
sV%*+[}#{)@]&@($+&!^[}![}&$}*^[!)#^_#**${+(!+!#)!^%_#%[][(@(!!}&)_*{%@_^!)_!_@!^!(
p71
I12934
sVinput("hola")
p72
I2803
sVfor item in a:\u000a    (even if item % 2 == 0 else odd).append(item)
p73
I10815
sVfrom tipocms.model simport *
p74
I12230
sVtempfile.TemporaryFile('w')
p75
I12275
sV__import__('hp_splash', fromlist=['cms.plugins'], level=-1)
p76
I12847
sVfrom django.contrib.auth.models import Group
p77
I6573
sVbase62_decode(base62_encode(x.int*32)) == x.int*32
p78
I21513
sVr.type
p79
I17614
sVt = Template('{% ifequal cat.shortname.lower "sale" %} on sale{% endifequal %}')
p80
I10874
sVo.__class__
p81
I17472
sVct.tokenize_doc(text)
p82
I6350
sVItem.objects.set_language('es')[0].title_en
p83
I11109
sVurlparse.urlunparse('?a=1&b=2').query
p84
I11722
sV_]}]!^_[!)&&&]_(#]+_!_}&&)#$*+^###[**@{}{%^[&#+&__@@@[+t]+&)^{*((@$!$)%]$[{}$}&$
p85
I13939
sVs = serializers.get_serializer('csv')
p86
I11388
sVprod.images
p87
I14330
sVFacet.objects.all()
p88
I3627
sVurljoin.__name__
p89
I17656
s.